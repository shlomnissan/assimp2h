// Copyright 2024 Betamark Pty Ltd. All rights reserved.
// Author: Shlomi Nissan (shlomi@betamark.com)

#include "writer.h"

#include <fstream>

#include <fmt/format.h>

namespace assimp2h {
    Writer::Writer(std::string_view name) : name_(name) {}

    auto Writer::setVertices(const std::vector<std::vector<float>>& vertices) -> void {
        vertices_ = vertices;
    }

    auto Writer::setIndices(const std::vector<std::vector<unsigned int>>& indices) -> void {
        indices_ = indices;
    }

    auto Writer::Write(std::string_view filename) const -> void {
        if (vertices_.empty()) {
            throw WriterError {"Error: No vertices to write"};
        }

        auto file_handle = std::ofstream(filename.data());
        if (!file_handle.is_open()) {
            throw WriterError {
                fmt::format("Error: Unable to open file {} for writing", filename)
            };
        }

        file_handle << "// This file was generated by assimp2h\n";
        file_handle << "// https://github.com/shlomnissan/assimp2h\n\n";
        file_handle << "#pragma once\n\n";
        file_handle << "#include <vector>\n\n";

        WriteVertices(file_handle);
        if (!indices_.empty()) {
            WriteIndices(file_handle);
        }

        file_handle.close();
    }

    auto Writer::WriteVertices(std::ofstream& fh) const -> void {
        auto idx = 0;
        for (const auto& vertex : vertices_) {
            fh << fmt::format("static const auto {}_vertex_{} = std::vector<float> ", name_, idx++) << '{';
            for (auto i = 0; i < vertex.size(); ++i) {
                if (i % 8 == 0) fh << "\n\t";
                fh << fmt::format("{:.2f}f", vertex[i]);
                fh << (i == vertex.size() - 1 ? "\n" : ", ");
            }
            fh << "};\n\n";
        }
    }

    auto Writer::WriteIndices(std::ofstream& fh) const -> void {
        auto idx = 0;
        for (const auto& index : indices_) {
            fh << fmt::format("static const auto {}_index_{} = std::vector<unsigned int> ", name_, idx++) << '{';
            for (auto i = 0; i < index.size(); ++i) {
                if (i % 3 == 0) fh << "\n\t";
                fh << fmt::format("{}", index[i]);
                fh << (i == index.size() - 1 ? "\n" : ", ");
            }
            fh << "};\n\n";
        }
    }
}